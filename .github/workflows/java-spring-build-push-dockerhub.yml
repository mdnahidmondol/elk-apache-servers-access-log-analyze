name: build-push-dockerhub
on:
  workflow_call:
    inputs:
      CONTAINER_IMAGE_NAME:
        description: ' Image Name to be used for deployment'
        required: true
        type: string
      IMAGE_TAG:
        description: Image Tag to be used for deployment
        required: true
        type: string
      DOCKER_REPOSITORY:
        description: Docker Repository to be used for push build image
        required: true
        type: string
env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

## OIDC Configuration
permissions:
  id-token: write
  contents: read
  deployments: write
  statuses: write

jobs       :
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Code Checkout
      uses: actions/checkout@v4

    - name: Setup Amazon Coretto 17
      uses: actions/setup-java@v4
      with:
        distribution: corretto
        java-version: '17'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Build with Gradle
      run: ./gradlew build -x test

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      with:
        install: true

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        registry: docker.io

    - name: Cache Docker Build
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Set image name
      id: image-name
      run: |
        echo "image_name=${{ inputs.DOCKER_REPOSITORY }}/${{ inputs.CONTAINER_IMAGE_NAME }}" >> $GITHUB_OUTPUT

    - name: Docker meta
      uses: docker/metadata-action@v4
      id: image-meta
      with:
        images: ${{ steps.image-name.outputs.image_name }}
        tags: |
          type=sha,format=long,prefix=sha-
          type=ref,event=branch
          type=ref,event=tag
          type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}

    - name: Build Image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        load: true
        tags: ${{ steps.image-meta.outputs.tags }}
        labels: ${{ steps.image-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Trivy cache
      uses: actions/cache@v4
      with:
        path: /tmp/trivy
        key: ${{ runner.os }}-trivy

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.image-name.outputs.image_name }}:${{ inputs.IMAGE_TAG }}
        format: table
        exit-code: '0'   # Change this to 1 when we want to fail the build
        ignore-unfixed: true
        vuln-type: os,library
        severity: CRITICAL,HIGH
        timeout: 10m

    - name: Move cache
      run: |
        if [ -d /tmp/.buildx-cache ] ; then rm -rf /tmp/.buildx-cache ; fi
        if [ -d /tmp/.build-cache-new ] ; then mv /tmp/.buildx-cache-new /tmp/.buildx-cache ; fi

    - name: Push Image to Dockerhub
      if: ${{ success() }}
      run: |
        docker push ${{ steps.image-name.outputs.image_name }}:${{ inputs.IMAGE_TAG }}
    - name: Logout of Amazon ECR and Docker Package Registry
      if: always()
      run: |
        docker logout docker.io
